import random
import time
from colorama import Fore, Style
import player
from trace_system import trace_system as ts

class Malware:
    TYPES = {
        "trojan": {
            "cost": 2500,
            "income": 0,  # Base income is 0, steals data over time
            "detection_rate": 20,
            "description": "Silently exfiltrates server data for continuous profit"
        },
        "ransomware": {
            "cost": 5000,
            "income": 0,  # Ransom amount based on server value
            "detection_rate": 40,
            "description": "Encrypts server files and demands ransom payment"
        }
    }

    @staticmethod
    def list_available():
        print(f"\n{Fore.CYAN}Available Malware:{Style.RESET_ALL}")
        for name, info in Malware.TYPES.items():
            print(f"- {name.title()}")
            print(f"  Cost: ${info['cost']}")
            print(f"  Income: ${info['income']}/min")
            print(f"  Risk: {info['detection_rate']}%")
            print(f"  Info: {info['description']}")

    @staticmethod
    def deploy(server, malware_type):
        if malware_type not in Malware.TYPES:
            print(f"{Fore.RED}Invalid malware type{Style.RESET_ALL}")
            return False

        if not server.get("root_access", False):
            print(f"{Fore.RED}Root access required to deploy malware{Style.RESET_ALL}")
            return False

        malware = Malware.TYPES[malware_type]
        cost = malware["cost"]

        if not player.deduct_money(cost):
            print(f"{Fore.RED}Insufficient funds to deploy {malware_type}{Style.RESET_ALL}")
            return False

        print(f"\n{Fore.CYAN}[*] Uploading {malware_type}...{Style.RESET_ALL}")

        # Simulate upload
        for i in range(3):
            time.sleep(random.uniform(1, 2))
            print(f"{Fore.YELLOW}[*] Uploading stage {i+1}/3...{Style.RESET_ALL}")

        ts.stop_trace()

        # Add malware to server with specific properties
        if "malware" not in server:
            server["malware"] = []
        
        malware_data = {
            "type": malware_type,
            "detection_rate": malware["detection_rate"],
            "install_time": time.time()
        }

        if malware_type == "trojan":
            malware_data["last_steal"] = time.time()
            print(f"{Fore.GREEN}[+] Trojan deployed! Silently stealing data...{Style.RESET_ALL}")
        elif malware_type == "ransomware":
            ransom = min(50000, server.get("money", 1000) * 2)  # Ransom based on server value
            malware_data["ransom"] = ransom
            malware_data["paid"] = False
            print(f"{Fore.GREEN}[+] Ransomware deployed! Files encrypted!")
            print(f"[+] Demanding ${ransom} ransom payment{Style.RESET_ALL}")
            server["files_encrypted"] = True  # Mark files as encrypted

        server["malware"].append(malware_data)
        player.gain_xp(50)
        return True

    @staticmethod
    def check_income(server):
        """Handle malware effects and income"""
        if "malware" not in server:
            return 0

        total_income = 0
        detected_malware = []

        for malware in server["malware"]:
            # Check for detection
            if random.randint(1, 100) <= malware["detection_rate"]:
                detected_malware.append(malware)
                print(f"{Fore.RED}[!] {malware['type'].title()} was detected and removed!{Style.RESET_ALL}")
                if malware["type"] == "ransomware" and not malware.get("paid", False):
                    print(f"{Fore.RED}[!] Files were recovered before payment!{Style.RESET_ALL}")
                    server["files_encrypted"] = False
                continue

            if malware["type"] == "trojan":
                # Steal data every 5 minutes
                if time.time() - malware["last_steal"] >= 300:
                    stolen_value = random.randint(500, 2000)
                    total_income += stolen_value
                    malware["last_steal"] = time.time()
                    print(f"{Fore.GREEN}[+] Trojan exfiltrated data worth ${stolen_value}{Style.RESET_ALL}")

            elif malware["type"] == "ransomware" and not malware["paid"]:
                # 30% chance of paying ransom every check
                if random.randint(1, 100) <= 30:
                    if random.randint(1, 100) <= 70:  # 70% chance they pay
                        total_income += malware["ransom"]
                        malware["paid"] = True
                        print(f"{Fore.GREEN}[+] Ransom paid! ${malware['ransom']} received{Style.RESET_ALL}")
                        server["files_encrypted"] = False
                    else:
                        print(f"{Fore.RED}[!] Target refused to pay ransom! Deleting their data...{Style.RESET_ALL}")
                        server["files"] = {}  # Delete all files
                        server["sensitive_data"] = {}  # Delete sensitive data
                        detected_malware.append(malware)  # Remove ransomware after data deletion

        # Remove detected malware
        for malware in detected_malware:
            server["malware"].remove(malware)

        return total_income

def update_all_servers_malware(servers):
    """Update all servers' malware income"""
    total_income = 0
    for server in servers.values():
        income = Malware.check_income(server)
        if income > 0:
            total_income += income
    
    if total_income > 0:
        player.add_money(total_income)
        print(f"{Fore.GREEN}ðŸ’° Collected ${total_income} from malware operations{Style.RESET_ALL}")
